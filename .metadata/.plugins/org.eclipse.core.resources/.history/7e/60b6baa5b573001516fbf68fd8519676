
import java.util.LinkedList;

public class Population {

	public LinkedList<Member> members;

	public Population(int size) {
		members = new LinkedList<Member>();
		

		// make the list of members
		for (int i = 0; i < size; i++) {
			Member newMember = new Member();
			members.add(newMember);
		}
	}
	
	// second constructor for non-initial populations
	public Population() {
		this.members = new LinkedList<Member>();
	}
	
	//constructor for creating a population with a set of members
	public Population(LinkedList<Member> m) {
		this.members = m;
	}
	
	// returns the member at the given index
	public Member getMember(int i) {
		return members.get(i);
	}
	

	// removes the member at the given index
	public void removeMember(int i) {
		members.remove(i);
	}
	
	// returns the size of population
	public int getSize() {
		return members.size();
	}

	// replaces the member at index i with given member
	public void saveMember(Member m) {
		members.add(m);
	}
	
	public int indexOf(Member m) {
		int i = 0;
		while(!m.equals(this.getMember(i))) {
			i++;
		}
		return i;
	}
	
	// Gets fittest member
	public Member getFittest() {

		int bestInd = 0;
		int best = members.get(0).getFitness();

		// Compares fitness of each member, grabs the member with the highest fitness
		for (int i = 0; i < getSize(); i++) {
			if (members.get(i).getFitness() > best) {
				bestInd = i;
				best = members.get(bestInd).getFitness();
			}
		}
		return members.get(bestInd);
	}
	
	
	//sum all fly fitnesses
	public int getPopulationFitness(){
		int fit = 0;
		for(int i = 0; i < this.getSize(); i++){
			fit += this.getMember(i).getFitness();
		}
		return fit;
	}
	
	@Override
	public String toString() {
		String ret = ' ';
		return ret;


}
