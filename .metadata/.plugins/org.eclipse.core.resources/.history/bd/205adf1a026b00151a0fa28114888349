import java.util.concurrent.ThreadLocalRandom;

public class Algorithm {
	// Initializing variables
	private static final int GENSIZE = 100;

	// make a new population
	public static Population parentSelection(Population pop1, Population pop2) {

		Population parentPop = new Population();

		for (int i = 0; i < GENSIZE; i++) {
			parentPop.saveMember(pop1.getMember(i));
			parentPop.saveMember(pop2.getMember(i));
		}

		return parentPop;
	}

	// makes a new population using crossover function
	public static Population makeBabies(Population pop) {
		Population newPop = new Population();

		Member mem1;
		Member mem2;

		for (int i = 0; i < GENSIZE; i++) {
			int rand = ThreadLocalRandom.current().nextInt(0, pop.getSize());
			int rand2 = ThreadLocalRandom.current().nextInt(0, pop.getSize());

			mem1 = pop.getMember(rand);
			mem2 = pop.getMember(rand2);

			// make the babies! and add them to the new population
			Member newMem = null;
			newMem = crossover(mem1, mem2);

			if (newMem != null) {
				newPop.saveMember(newMem);
			} else {
				System.out.println("crossover didn't create a new member");
				System.exit(0);
			}
		}

		return newPop;
	}

	// Randomly combine genes of two members to make a new member
	private Member crossover(Member mem1, Member mem2) {
		Member newMem = mem1;

		int rand = ThreadLocalRandom.current().nextInt(0, mem1.getSize());

		// make baby from the pair of parents
		for (int i = 0; i <= rand; i++) {
			newMem.setGene(i, mem2.getGene(i));
		}
		// Generate a random number between 1 and 20
		// if 20, mutate current member
		int mutRand = ThreadLocalRandom.current().nextInt(0, 21);
		if (mutRand == 20) {
			newMem = mutate(newMem);
		}

		return newMem;
	}

	private Member mutate(Member mem) {
		Member mutMem = new Member;
		return mutMem;
	}
	
	
	
	
	// Getters and setters
	public static int getGenSize() {
		return GENSIZE;
	}
}
